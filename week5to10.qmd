---
title: "Weeks 5-10"
---

```{r LoadLibraries}
#| title: "Load Libraries"
#| messages: false
#| echo: true
#| error: false
#| warning: false
#| results: "hide"
library(knitr)
library(gtsummary)
library(tidyverse)
library(flextable)
library(kableExtra)
library(ggplot2)
library(gtsummary)
```



# Week 5

## Shoring up our understanding of the basics

Take the self-assessment please.

# Week 6

```{r OurData}
#| title: "Our Data"
#| messages: false
#| echo: true
#| error: false
data(mtcars)
str(mtcars)
mtcars2 <- within(mtcars, {
   vs.f <- factor(vs, labels = c("V", "S"))
   am.f <- factor(am, labels = c("automatic", "manual"))
   gear.f <- factor(gear, labels = c("3g", "4g", "5g"))
   cyl.f <- factor(cyl, labels = c("4c", "6c", "8c"))
   carb.f <- factor(carb, labels = c("1b", "2b", "3b", "4b", "6b", "8b"))
   cyl.fo  <- ordered(cyl)
   gear.fo <- ordered(gear)
   carb.fo <- ordered(carb)
})
knitr::kable(str(mtcars2))
```


## Categorical Predictors

This week (2/19) is our week to get cracking on categorical predictors. We'll start with a review of the basics, and then address two:
- Dummy coding
- Effects coding

Next week, we tackle contrast coding and polynomial coding.

### Some Basics

Categorical predictors are typically non-numerical.  In R, we refer to these predictors as factors.  Factors are a type of variable that takes on a limited number of different values; each value is referred to as a level.  For example, the variable `vs` in the `mtcars` dataset is a factor with two levels: `V` and `S`.  The variable `am` in the `mtcars` dataset is a factor with two levels: `automatic` and `manual`.  I created factors from two other variables - gear and cyl - and gave them labels that are more meaningful than the numbers that they represent.  All of these variables contain categorical data and, as a result, need to be converted into numbers so we can use them in the General Linear Model.


#### Levels, Tables, and Contrasts

You have two tools at your disposal to understand the $k$-levels of a factor: `levels()` and `table()`.  The `levels()` function returns the levels of a vector that has been stored as a factor (i.e., `as.factor()` or `factor()`.  The `table()` function returns the frequency of each level of a factor.  Additionally, the `contrasts()` function returns the contrasts used to code the levels of a factor.  We will use these functions to understand the levels of the factors we created from the `mtcars` dataset.

```{r CodingBasics}
#| title: "Coding Basics"
#| messages: false
#| echo: true
#| error: false
#| warning: false
levels(mtcars2$vs)
table(mtcars2$vs)
levels(mtcars2$vs.f)
levels(mtcars2$am)
table(mtcars2$am)
levels(mtcars2$am.f)
levels(mtcars2$gear.f)
levels(mtcars2$cyl.f)
contrasts(mtcars2$vs.f)
contrasts(mtcars2$gear.f)
contrasts(mtcars2$cyl.f)
```


### Dummy Coding

R defaults to dummy coding so if you prefer this method, just leave the handling of factors to R.  **NOT RECOMMENDED**.  Usually, we want to use a different coding method but for now, we will keep to dummy codes or, as referred to in the R world - treatment contrasts.

#### One 2-level Factor

```{r DummyCoding2lvl}
#| messages: false
#| echo: true
#| error: false
#| warning: false

# Base R way
contrasts(mtcars2$vs.f)
fit <- lm(mpg ~ vs.f, data = mtcars2)
summary(fit)

# Tidyverse way
mtcars2 %>%
  dplyr::as_tibble() %>%
  lm(mpg ~ vs.f, 
     data = .,
     contrasts = list(vs.f = contr.treatment)) %>%
  summary()

# means by vs.f
mtcars2 %>%
  group_by(vs.f) %>%
  summarise(mean_mpg = mean(mpg)) %>%
  kable(digits = 3)

```

Note how the `V` level of the `vs.f` factor is the reference level.  The coefficient for `vs.fS` is the difference between the mean of `mpg` for the `S` level of `vs.f` and the mean of `mpg` for the `V` level of `vs.f`.  The coefficient for `vs.fV` is actually the intercept.  So, the intercept is the reference level mean and the regression coefficient for each level of the factor is the **difference between** that reference mean.  Pretty easy, huh?

#### One k-level Factor

Two-level factors are easy.  When we have two levels ($k=2$), we get one ($k-1$) new variables.  But what about a factor with three levels ($k=3$)?  We get two ($k-1$) new variables.  The first variable is the difference between the mean of the second level compared to the base level (often the first, unless otherwise specified).  The second variable is the difference between the mean of the third level and the mean of the third level.  The third level is the reference level.

```{r DummyCoding3lvl}
#| messages: false
#| echo: true
#| error: false
#| warning: false

# Base R way
contrasts(mtcars2$gear.f)
fit <- lm(mpg ~ gear.f, data = mtcars2)
summary(fit)

# Tidyverse way
mtcars2 %>%
  dplyr::as_tibble() %>%
  lm(mpg ~ gear.f, 
     data = .,
     contrasts = list(gear.f = contr.treatment)) %>%
  summary()

# means by gear.f
mtcars2 %>%
  group_by(gear.f) %>%
  summarise(mean_mpg = mean(mpg)) %>%
  kable(digits = 3)
```

#### Two Factors (Main Effects)

```{r Dummy2FactorsMainEffects}
#| messages: false
#| echo: true
#| error: false
#| warning: false
table(mtcars2$vs.f, mtcars2$cyl.f)

mtcars2 %>%
  dplyr::as_tibble() %>%
  lm(mpg ~ vs.f + cyl.f, 
     data = .,
     contrasts = list(vs.f = contr.treatment, gear.f = contr.treatment)) %>%
  summary()

# means by vs.f and gear.f
mtcars2 %>%
  group_by(vs.f, cyl.f) %>%
  summarise(mean_mpg = mean(mpg)) %>%
  kable(digits = 3)
```



#### Two Factors (Interaction)

```{r Dummy2FactorsFullFactorial}
#| messages: false
#| echo: true
#| error: false
#| warning: false
mtcars2 %>%
  dplyr::as_tibble() %>%
  lm(mpg ~ vs.f * cyl.f, 
     data = .,
     contrasts = list(vs.f = contr.treatment, cyl.f = contr.treatment)) %>%
  summary()

# means by vs.f and gear.f
mtcars2 %>%
  group_by(vs.f, cyl.f) %>%
  summarise(mean_mpg = mean(mpg)) %>%
  kable(digits = 3)
```



## Effects Coding

Effects coding is a bit more complicated.  The base comparison level of the factor is coded as $-1$; the focal level for each "new variable" is coded with a 1.  Recall that the same coding scheme exists for dummy coding but with effects coding, the LAST level is the default base comparison level and is coded with a $-1$ instead of a $0$.  The big deal about effects codes - at least compared to dummy coding - is that effects codes are centered AND orthogonal (kinda).  We will discuss these properties in a bit.  


```{r EffCoding2lvl}
#| messages: false
#| echo: true
#| error: false
#| warning: false


# Tidyverse way
mtcars2 %>%
  dplyr::as_tibble() %>%
  lm(mpg ~ vs.f, 
     data = .,
     contrasts = list(vs.f = contr.sum)) %>%
  summary()

# means by vs.f
mtcars2 %>%
  group_by(vs.f) %>%
  summarise(mean_mpg = mean(mpg)) %>%
  kable(digits = 3)

```

#### Three-level Factor (and more!)

```{r EffCoding3lvl}
#| messages: false
#| echo: true
#| error: false
#| warning: false

mtcars2 %>%
  dplyr::as_tibble() %>%
  lm(mpg ~ cyl.f, 
     data = .,
     contrasts = list(cyl.f = contr.sum)) %>%
  summary()

# means by gear.f
mtcars2 %>%
  group_by(cyl.f) %>%
  summarise(mean_mpg = mean(mpg)) %>%
  kable(digits = 3)
```




```{r othermodels}
#| messages: false
#| echo: true
#| error: false
#| warning: false





lm(mpg ~ 1, data = mtcars2) %>%
  tbl_regression(intercept = TRUE, add_estimate_to_reference_rows=TRUE) %>% 
  add_glance_table(include = c(r.squared, adj.r.squared)) %>% 
  bold_p(t = 0.05) %>% 
  as_flex_table()

lm(mpg ~ vs.f, data = mtcars2) %>%
  tbl_regression()

lm2 <- lm(mpg ~ am.f, data = mtcars2) %>%
  tbl_regression()

lm3 <- lm(mpg ~ gear.f, data = mtcars2) %>%
  tbl_regression()

lm4 <- lm(mpg ~ cyl.f, data = mtcars2) %>%
  tbl_regression()

```



### Effects Coding


# Week 7

## Categorical Predictors (cont.)

### Contrast Coding

### Polynomial Coding

# Week 8 - SPRING BREAK (No Class)

# Week 9

## Interactions (aka Moderation)

### Simple Interactions

### Complex Interactions

# Week 10

## Moderation (cont.)

### Interactions with Categorical Predictors

### Interactions with Multiple Predictors

### Interactions with Polynomial Predictors

### Interactions with Higher-Order Predictors

