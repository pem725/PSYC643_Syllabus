---
title: "Mediation Demo"
server: shiny
---

# FIXME summer 2024


```{r pltme}
#| echo: true
#| eval: true
#| include: true
#| message: false
#| warning: false
#| error: false


```


## Shiny Demonstration


Here is a shiny demonstration of mediation analysis. The user can select which effects to include in the model.

# NOT WORKING YET

```{r libs}
#| echo: false
#| eval: false
#| include: false
#| message: false
#| warning: false
#| error: false

library(ggplot2)
library(mediation)
library(broom)

```

```{r}
#| eval: false
#| echo: false
#| include: false
#| panel: sidebar
#| title: "Mediation Analysis"

checkboxInput("a", "Direct Effect\n(x --> M)", value = FALSE)
checkboxInput("b", "Direct Mediator Effect\n(M --> Y)", value = FALSE)
checkboxInput("c", "Main Effect\n(x --> Y)", value = FALSE)
sliderInput("N", "Sample Size", min = 50, max = 1000, value = 300, step = 50)
```

```{r}
#| eval: false
#| echo: false
#| include: false
#| panel: fill
#| title: "Mediation Analysis"

#plotOutput("modPlot")
tableOutput("modSum")

```

```{r}
#| eval: false
#| echo: false
#| include: false
#| context: server
#| title: "Mediation Analysis"


dat <- reactive({
  N <- input$N
  x <- rnorm(N, 1, 3)
  m <- 3*(input$a)*x + rnorm(N, 0, 3)
  y <- 3*(input$c)*x + 3*(input$b)*m + rnorm(N, 0, 3)
  data.frame(x = x, m = m, y = y)
})

out <- reactive({
  m.fit <- lm(m ~ x, data = dat())
  y.fit <- lm(y ~ x + m, data = dat())
  res <- mediation::mediate(m.fit, y.fit, treat = "x", mediator = "m", boot = FALSE)
})

output$modSum <- renderTable({
  broom::tidy(out()$res)
})

#### RC - fix this stuff above and below.  Bootstrap stuff needs to be added. #####

#output$modPlot <- renderPlot({
#    mediation::plot(res)  
#})

```


```{r}
#| eval: false
#| echo: false
#| include: false
input <- list(sigEffs = c("a", "b", "c"), boot = TRUE)

  x <- rnorm(1000, 1, 3)
  m <- 3*("a" %in% input$sigEffs)*x + rnorm(1000, 0, 3)
  y <- 3*("c" %in% input$sigEffs)*x + 3*("b" %in% input$sigEffs)*m + rnorm(1000, 0, 3)
  
  dat <- data.frame(x = x, m = m, y = y)
  m.fit <- lm(m ~ x, data = dat)
  y.fit <- lm(y ~ x + m, data = dat)
  res <- mediation::mediate(m.fit, y.fit, treat = "x", mediator = "m", boot = input$boot)

  tidy(res)


```


